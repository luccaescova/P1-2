"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const database_1 = require("../config/database");
const createTables = () => __awaiter(void 0, void 0, void 0, function* () {
    const scripts = [
        // Adicione os scripts de criação de tabelas aqui
        `
        CREATE TABLE Users (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            name VARCHAR2(100) NOT NULL,
            email VARCHAR2(100) UNIQUE NOT NULL,
            password VARCHAR2(200) NOT NULL,
            wallet_balance NUMBER(10, 2) DEFAULT 0 NOT NULL,
            is_moderator CHAR(1) DEFAULT 'N' CHECK (is_moderator IN ('Y', 'N'))
        )
        `,
        `
        CREATE TABLE Events (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            title VARCHAR2(50) NOT NULL,
            description VARCHAR2(150),
            bet_amount NUMBER(10, 2) NOT NULL,
            start_date DATE NOT NULL,
            end_date DATE NOT NULL,
            result CHAR(1) DEFAULT NULL CHECK (result IN ('Y', 'N')),
            status VARCHAR2(20) DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected', 'finished', 'deleted')),
            creator_id NUMBER NOT NULL,
            FOREIGN KEY (creator_id) REFERENCES Users(id) ON DELETE CASCADE
        )
        `,
        `
        CREATE TABLE Bets (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            event_id NUMBER NOT NULL,
            user_id NUMBER NOT NULL,
            amount NUMBER(10, 2) NOT NULL,
            prediction CHAR(1) NOT NULL CHECK (prediction IN ('Y', 'N')),
            FOREIGN KEY (event_id) REFERENCES Events(id) ON DELETE CASCADE,
            FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
        )
        `,
        `
        CREATE TABLE WalletTransactions (
            id NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY PRIMARY KEY,
            user_id NUMBER NOT NULL,
            amount NUMBER(10, 2) NOT NULL,
            type VARCHAR2(20) NOT NULL CHECK (type IN ('deposit', 'withdraw')),
            details VARCHAR2(255),
            timestamp DATE DEFAULT CURRENT_TIMESTAMP NOT NULL,
            FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE
        )
        `
    ];
    const queryRunner = database_1.AppDataSource.createQueryRunner();
    // Inicia uma nova transação
    yield queryRunner.connect();
    yield queryRunner.startTransaction();
    try {
        for (const script of scripts) {
            console.log(`Executando script:\n${script}`);
            yield queryRunner.query(script); // Executa o script SQL
        }
        // Se todos os scripts foram executados com sucesso, comita a transação
        yield queryRunner.commitTransaction();
        console.log("Tabelas criadas com sucesso!");
    }
    catch (error) {
        console.error("Erro ao criar tabelas:", error);
        // Se ocorrer um erro, desfaz a transação
        yield queryRunner.rollbackTransaction();
    }
    finally {
        // Libera o QueryRunner
        yield queryRunner.release();
    }
});
/*try {
    const connection = await AppDataSource.initialize();

    for (const script of scripts) {
        console.log(`Executando script:\n${script}`);
        await connection.query(script);
    }

    await connection.commit();
    console.log("Tabelas criadas com sucesso!");
    //await connection.close();
} catch (error) {
    console.error("Erro ao criar tabelas:", error);
}
};*/
exports.default = createTables;
